Problem Statement: Given an array of N + 1 size, where each element is between 1 and N. Assuming there is only one duplicate number, your task is to find the duplicate number.

Solution 1:Using sorting
int findDuplicate(vector < int > & arr) {
  int n = arr.size();
  sort(arr.begin(), arr.end());
  for (int i = 0; i < n - 1; i++) {
    if (arr[i] == arr[i + 1]) {
      return arr[i];
    }
  }
}

Solution 2: Using maxsum and current sum:

Approach: 

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        long long int sum=0;
        long long int maxsum=0;
        sort(nums.begin(),nums.end());
        
        
        for(int i=1;i<=nums.size()-1;i++){ 
            maxsum+=i;
        }
        for(int i=0;i<nums.size()-1;i++){
            if(nums[i]!=nums[i+1])
             sum+=nums[i];
            else{
                return nums[i];
            }
        }
        if(sum>maxsum){
            return sum-maxsum;
        }
        else{
            return 0;
        }
    };
